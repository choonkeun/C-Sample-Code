

https://www.dotnetperls.com/#c#+regex

https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference

---
Regex.Replace("(949) 111-1111", @"[^0-9]+", "");  --> 9491111111
---
string sentence = "10 cats, 20 dogs, 40 fish and 1 programmer.";
string[] digits = Regex.Split(sentence, @"\D+");
10
20
40
1
---
string source = "  Some text ";
source = Regex.Replace(source, @"^\s+", "");
source = Regex.Replace(source, @"\s+$", "");        //This requires that we match at the end.
source = Regex.Replace(source, @"^\s+|\s+$", "");

isAlphaNumeric: Regex.IsMatch(path, @"^[a-zA-Z0-9]*$");
RemoveDigits:   Regex.Replace(key, @"\d", "");
                "([a-zA-Z0-9\-]+?)    : group of alphanumeric characters
---
Regex a1 = new Regex(@"^\s+", RegexOptions.Compiled);
Regex a2 = new Regex(@"\s+$", RegexOptions.Compiled);
string source = "  Some text ";
source = a1.Replace(source, "");
source = a2.Replace(source, "");
---
string s1 = "This string has something at the end<br/>";
string s2 = System.Text.RegularExpressions.Regex.Replace(s1, "<br/>$", "");  // Use regular expression to trim the ending string.
---
var regexMatches = Regex.Matches(document.Text, @"{{TEXT-[1-5][1-6]}}");
if (regexMatches != null && regexMatches.Count > 0)
{
    List<Match> matchList = regexMatches.Cast<Match>().Where(t => t.Value == @"{{TEXT-21}}").ToList();
    //foreach (Match m in regexMatches) 
    //{
    //    document.ReplaceText(m.Value.ToString(), " Value ");
    //}
}

