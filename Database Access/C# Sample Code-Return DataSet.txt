using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using System.Data;
using System.Data.SqlClient;
using System.Configuration;


public partial class WebForm0 : System.Web.UI.Page
{

    //Web.config
    //configuration>
    //<connectionStrings>
    //    <add name="DBCS" connectionString="data source=.; database=Northwind; Integrated Security=SSPI" 
    //         providerName="System.Data.SqlClient"/>
    //</connectionStrings>

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            string sqlText = "select * from Products";
            GridView1.DataSource = GetProducts(1, sqlText, null);
            GridView1.DataBind();
        }
    }

    private DataSet GetProducts(int type, string SqlText, SqlParameter Para)
    {
        // 해설: 1. ConfigurationManager의 기능을 이용하여,
        // 2. Web.Config File안에서 'ConnectionStrings'항목을 찾은 다음
        // 3. Name이 ["DBCS"]인 항목을 찾은 후에
        // 4. 'connectionstring'이 정의 된 내용(data부터 SSPI까지) 전체를 가져온다음
        // 5. 그 내용을 CS라는 String을 넣어라
        string CS1 = ConfigurationManager.ConnectionStrings["DBCS1"].ConnectionString;

        // 이제부터 MSSQL-DB 연결작업을 한다.(Oracle일경우 OracleConnection)
        // 우선 MSSQL DB와 Connection을 위하여 SQLDB Connection Class를 생성한다.
        using (SqlConnection con = new SqlConnection(CS1))
        {
            // Way1: 연결된 DB에서 사용할 SQL Command Class를 작성한다.
            // 이때 CLass생성시에 할수도 있고 또는 생성된 Command에 Setting을 하는 방법도 있다.
            // 1. new SqlCommand();
            // 2. new SqlCommand(string sqlcmdtext);
            // 3. new SqlCommand(string sqlcmdtext, connection);
            // 4. new SqlCommand(string sqlcmdtext, connection, transaction);

            SqlDataAdapter da = new SqlDataAdapter(SqlText, con);
            da.SelectCommand.CommandType = type == 1 ? CommandType.Text : CommandType.StoredProcedure;
            if (Para != null)
            {
                da.SelectCommand.Parameters.Add(Para);
            }

            // DB와 Connection이 되었고, SL Command도 준비가 되었으므로 DB를 Open한 다음 SQL을 실행한다.
            con.Open();
            DataSet ds = new DataSet();
            da.Fill(ds);
            con.Close();
            return ds;
        }
    }

    protected void Button1_Click(object sender, EventArgs e)
    {
        if (TextBox1.Text.Length > 0)
        {
            SqlParameter parameter1 = new SqlParameter();
            parameter1.ParameterName = "@ProductID";
            parameter1.Value = Int32.Parse(TextBox1.Text);
            GridView1.DataSource = GetProducts(2, "GetProductsByProductID", parameter1);
        }
        else
        {
            string sqlText = "select * from Products";
            GridView1.DataSource = GetProducts(1, sqlText, null);
        }
        GridView1.DataBind();
    }

    //protected void Button1_Click(object sender, EventArgs e)
    //{
    //    string CS1 = ConfigurationManager.ConnectionStrings["DBCS1"].ConnectionString;

    //    using (SqlConnection con1 = new SqlConnection(CS1))
    //    {
    //        SqlCommand cmd1 = new SqlCommand("GetProductsByProductID", con1);
    //        cmd1.CommandType = CommandType.StoredProcedure;
    //        cmd1.Parameters.AddWithValue("@ProductID", Int32.Parse(TextBox1.Text));
    //        con1.Open();
    //        // 1. cmd.EndExecuteReader() : 결과의 값이 1개이상 나오는 경우
    //        // 2. cmd.ExecuteNonQuery()  : 결과의 값이 integer로 나오는 경우(INSERT/UPDATE/DELETE)
    //        // 3. cmd.ExecuteScalar()    : 결과의 값이 object로 나오는 경우(숫자, 문자 string등등)            
    //        GridView1.DataSource = cmd1.ExecuteReader();
    //        GridView1.DataBind();
    //    }
    //}
}