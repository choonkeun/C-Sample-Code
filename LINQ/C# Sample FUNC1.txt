C# Sample FUNC1.txt
-------------------

LINQ
    IEnumerable<int> enumerable = Enumerable.Range(21, 30);     //(start Value, Count) -> "21" ~ "50"
    List<string> toString1 = (from i in enumerable select i.ToString()).ToList();
    List<string> toString2 = enumerable.Select(i => i.ToString()).ToList();

    List<int> asList = enumerable.ToList();
    List<string> toString3 = asList.ConvertAll<string>(x => x.ToString());
    List<string> toString4 = asList.ConvertAll<string>(delegate(int i) { return i.ToString(); });
    
FUNC
    //public delegate TResult Func<in T2, in T2, in T3, out TResult>(T1 arg, T2 arg, T3 arg);
    Func<int, string> _ToString = x => x.ToString();
    List<string> toString5 = asList.Select(_ToString).ToList();
    List<string> toString6 = enumerable.Select(_ToString).ToList();
    
Predicate: Predicate<T> is basically identical to Func<T,bool>.

    Predicate<int> pre = delegate(int a){ return a % 2 == 0; };
    int firstEven = asList.Find(pre);
    
    Predicate<Person> oscarFinder = (Person p) => { return p.Name == "Oscar"; };
    Predicate<Person> ruthFinder = (Person p) => { return p.Name == "Ruth"; };
    Predicate<Person> seventeenYearOldFinder = (Person p) => { return p.Age == 17; };

    Person oscar = people.Find(oscarFinder);
    Person ruth = people.Find(ruthFinder);
    Person seventeenYearOld = people.Find(seventeenYearOldFinder);

    //Sample
    Predicate<int> pre = delegate(int a) { return a % 2 == 0; };
    int firstEven = asList.Find(pre);
    List<bool> toString7 = new List<bool>();
    for (int i = 0; i < asList.Count; i++)
    {
        toString7.Add(pre(asList[i]));
    }
